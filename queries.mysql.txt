CREATE TABLE auth_group (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, name varchar(150) NOT NULL UNIQUE);
CREATE TABLE auth_group_permissions (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, group_id integer NOT NULL REFERENCES auth_group (id) , permission_id integer NOT NULL REFERENCES auth_permission (id));
CREATE TABLE auth_permission (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, content_type_id integer NOT NULL REFERENCES django_content_type (id) , codename varchar(100) NOT NULL, name varchar(255) NOT NULL);
CREATE TABLE auth_user (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, password varchar(128) NOT NULL, last_login datetime NULL, is_superuser bool NOT NULL, username varchar(150) NOT NULL UNIQUE, last_name varchar(150) NOT NULL, email varchar(254) NOT NULL, is_staff bool NOT NULL, is_active bool NOT NULL, date_joined datetime NOT NULL, first_name varchar(150) NOT NULL);
CREATE TABLE auth_user_groups (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, user_id integer NOT NULL REFERENCES auth_user (id) , group_id integer NOT NULL REFERENCES auth_group (id) );
CREATE TABLE auth_user_user_permissions (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, user_id integer NOT NULL REFERENCES auth_user (id) , permission_id integer NOT NULL REFERENCES auth_permission (id) );
CREATE TABLE django_admin_log (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, action_time datetime NOT NULL, object_id text NULL, object_repr varchar(200) NOT NULL, change_message text NOT NULL, content_type_id integer NULL REFERENCES django_content_type (id) , user_id integer NOT NULL REFERENCES auth_user (id) , action_flag smallint unsigned NOT NULL CHECK (action_flag >= 0));
CREATE TABLE django_content_type (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, app_label varchar(100) NOT NULL, model varchar(100) NOT NULL);
CREATE TABLE django_migrations (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, app varchar(255) NOT NULL, name varchar(255) NOT NULL, applied datetime NOT NULL);
CREATE TABLE django_session (session_key varchar(40) NOT NULL PRIMARY KEY, session_data text NOT NULL, expire_date datetime NOT NULL);
CREATE TABLE posts_blog_post (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, published_date_time datetime NOT NULL, last_modified datetime NOT NULL, title varchar(256) NOT NULL, content text NOT NULL, picture varchar(100) NULL, files varchar(100) NULL, description varchar(255) NULL, in_review bool NOT NULL, user_id_id integer NOT NULL REFERENCES auth_user (id) , slug varchar(50) NOT NULL UNIQUE);
CREATE TABLE posts_blog_post_kws (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, blog_post_id integer NOT NULL REFERENCES posts_blog_post (id) , techkw_id integer NOT NULL REFERENCES posts_techkw (id) );
CREATE TABLE posts_likes_dislike (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, like_dislike varchar(8) NOT NULL, blog_id_id integer NOT NULL REFERENCES posts_blog_post (id) , user_id_id integer NOT NULL REFERENCES auth_user (id) );
CREATE TABLE posts_techkw (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, keyword varchar(16) NOT NULL);
CREATE TABLE posts_user_comments (id integer NOT NULL PRIMARY KEY AUTO_INCREMENT, timestamp datetime NOT NULL, blog_id_id integer NOT NULL REFERENCES posts_blog_post (id) , comment text NOT NULL, user_id_id integer NOT NULL REFERENCES auth_user (id) );
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE posts_user_profile (cell_no integer NULL, personal_web varchar(128) NULL, profile_pic varchar(100) NULL, nick_name varchar(64) NULL, user_id integer NOT NULL PRIMARY KEY REFERENCES auth_user (id) );

DROP TABLE IF EXISTS auth_group_permissions;
DROP TABLE IF EXISTS auth_group;
DROP TABLE IF EXISTS auth_permission;
DROP TABLE IF EXISTS auth_user;
DROP TABLE IF EXISTS django_content_type;
DROP TABLE IF EXISTS auth_user_groups;
DROP TABLE IF EXISTS auth_user_user_permissions;
DROP TABLE IF EXISTS django_admin_log;
DROP TABLE IF EXISTS django_migrations;
DROP TABLE IF EXISTS posts_blog_post;
DROP TABLE IF EXISTS posts_blog_post_kws;
DROP TABLE IF EXISTS posts_likes_dislike;
DROP TABLE IF EXISTS posts_techkw;
DROP TABLE IF EXISTS posts_user_comments;
DROP TABLE IF EXISTS posts_user_profile;
DROP TABLE IF EXISTS django_session;

